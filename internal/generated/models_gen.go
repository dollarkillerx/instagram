// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type AuthPayload struct {
	AccessTokenString string `json:"accessTokenString"`
	UserID            string `json:"userID"`
}

type Captcha struct {
	Base64Captcha string `json:"base64Captcha"`
	CaptchaID     string `json:"captchaId"`
}

type LoginByPassword struct {
	CaptchaID   string `json:"captchaID"`
	CaptchaCode string `json:"captchaCode"`
	Account     string `json:"account"`
	Password    string `json:"password"`
}

type Registry struct {
	CaptchaID   string `json:"captchaID"`
	CaptchaCode string `json:"captchaCode"`
	Account     string `json:"account"`
	Name        string `json:"name"`
	Password    string `json:"password"`
}

type UserInformation struct {
	AccountID   string `json:"accountId"`
	Role        Role   `json:"role"`
	Account     string `json:"account"`
	AccountName string `json:"accountName"`
}

type Role string

const (
	RoleGeneralUser Role = "GeneralUser"
	RoleAdmin       Role = "Admin"
)

var AllRole = []Role{
	RoleGeneralUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleGeneralUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
